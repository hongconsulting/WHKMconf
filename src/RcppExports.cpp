// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// WH_Nair
Eigen::MatrixXd WH_Nair(const Eigen::VectorXd& time, const Eigen::VectorXd& surv, const Eigen::VectorXd& SE, const Eigen::VectorXi& risk, const Eigen::VectorXi& event, double alpha, double e_override);
RcppExport SEXP _WHKMconf_WH_Nair(SEXP timeSEXP, SEXP survSEXP, SEXP SESEXP, SEXP riskSEXP, SEXP eventSEXP, SEXP alphaSEXP, SEXP e_overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type surv(survSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type SE(SESEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type e_override(e_overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_Nair(time, surv, SE, risk, event, alpha, e_override));
    return rcpp_result_gen;
END_RCPP
}
// WH_Rothman
Eigen::MatrixXd WH_Rothman(const Eigen::VectorXd& surv, const Eigen::VectorXi& risk, const Eigen::VectorXi& event, double alpha);
RcppExport SEXP _WHKMconf_WH_Rothman(SEXP survSEXP, SEXP riskSEXP, SEXP eventSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type surv(survSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_Rothman(surv, risk, event, alpha));
    return rcpp_result_gen;
END_RCPP
}
// WH_ThomasGrunkemeier
Eigen::MatrixXd WH_ThomasGrunkemeier(const Eigen::VectorXd& time, const Eigen::VectorXi& risk, const Eigen::VectorXi& event, double alpha);
RcppExport SEXP _WHKMconf_WH_ThomasGrunkemeier(SEXP timeSEXP, SEXP riskSEXP, SEXP eventSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_ThomasGrunkemeier(time, risk, event, alpha));
    return rcpp_result_gen;
END_RCPP
}
// WH_HollanderMcKeague
Eigen::MatrixXd WH_HollanderMcKeague(const Eigen::VectorXd& time, const Eigen::VectorXi& risk, const Eigen::VectorXi& event, double alpha, bool warn, double tol_G, int maxit_G, double tol_K, int maxit_K);
RcppExport SEXP _WHKMconf_WH_HollanderMcKeague(SEXP timeSEXP, SEXP riskSEXP, SEXP eventSEXP, SEXP alphaSEXP, SEXP warnSEXP, SEXP tol_GSEXP, SEXP maxit_GSEXP, SEXP tol_KSEXP, SEXP maxit_KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type warn(warnSEXP);
    Rcpp::traits::input_parameter< double >::type tol_G(tol_GSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_G(maxit_GSEXP);
    Rcpp::traits::input_parameter< double >::type tol_K(tol_KSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_K(maxit_KSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_HollanderMcKeague(time, risk, event, alpha, warn, tol_G, maxit_G, tol_K, maxit_K));
    return rcpp_result_gen;
END_RCPP
}
// WH_e_alpha
double WH_e_alpha(double lower, double upper, double alpha, double tol, int maxit);
RcppExport SEXP _WHKMconf_WH_e_alpha(SEXP lowerSEXP, SEXP upperSEXP, SEXP alphaSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_e_alpha(lower, upper, alpha, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// WH_e_alpha_MC
double WH_e_alpha_MC(double lower, double upper, double alpha, int n_step, int n_rep, int seed);
RcppExport SEXP _WHKMconf_WH_e_alpha_MC(SEXP lowerSEXP, SEXP upperSEXP, SEXP alphaSEXP, SEXP n_stepSEXP, SEXP n_repSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type n_step(n_stepSEXP);
    Rcpp::traits::input_parameter< int >::type n_rep(n_repSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_e_alpha_MC(lower, upper, alpha, n_step, n_rep, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WHKMconf_WH_Nair", (DL_FUNC) &_WHKMconf_WH_Nair, 7},
    {"_WHKMconf_WH_Rothman", (DL_FUNC) &_WHKMconf_WH_Rothman, 4},
    {"_WHKMconf_WH_ThomasGrunkemeier", (DL_FUNC) &_WHKMconf_WH_ThomasGrunkemeier, 4},
    {"_WHKMconf_WH_HollanderMcKeague", (DL_FUNC) &_WHKMconf_WH_HollanderMcKeague, 9},
    {"_WHKMconf_WH_e_alpha", (DL_FUNC) &_WHKMconf_WH_e_alpha, 5},
    {"_WHKMconf_WH_e_alpha_MC", (DL_FUNC) &_WHKMconf_WH_e_alpha_MC, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_WHKMconf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
